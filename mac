#!/bin/sh

HOMEBREW_PREFIX="/opt/homebrew"

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

update_shell() {
  local shell_path;
  shell_path="$(command -v fish)"

  fancy_echo "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

# append_to_zshrc() {
#   local text="$1" zshrc
#   local skip_new_line="${2:-0}"
#
#   if [ -w "$HOME/.zshrc.local" ]; then
#     zshrc="$HOME/.zshrc.local"
#   else
#     zshrc="$HOME/.zshrc"
#   fi
#
#   if ! grep -Fqs "$text" "$zshrc"; then
#     if [ "$skip_new_line" -eq 1 ]; then
#       printf "%s\\n" "$text" >> "$zshrc"
#     else
#       printf "\\n%s\\n" "$text" >> "$zshrc"
#     fi
#   fi
# }

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# if [ ! -f "$HOME/.zshrc" ]; then
#   touch "$HOME/.zshrc"
# fi

# shellcheck disable=SC2016
# append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

# gem_install_or_update() {
#   if gem list "$1" --installed > /dev/null; then
#     gem update "$@"
#   else
#     gem install "$@"
#   fi
# }

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    # append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    # export PATH="/usr/local/bin:$PATH"
fi

# if brew list | grep -Fq brew-cask; then
#   fancy_echo "Uninstalling old Homebrew-Cask ..."
#   brew uninstall --force brew-cask
# fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "universal-ctags/universal-ctags"
tap "heroku/brew"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "alacritty"
brew "bat"
brew "exa"
brew "fd"
brew "fish"
brew "git"
brew "neovim"
brew "procs"
brew "ripgrep"
brew "starship"
brew "tokei"

# Heroku
brew "heroku"

# GitHub
brew "gh"

# Programming language prerequisites and package managers
brew "asdf"

# Other basic 3rd-party tools
cask "1password"
cask "1password-cli"
cask "aerial"
cask "backblaze"
cask "docker"
cask "transmit"
mas "Amphetamine", id: 937984704
mas "DuckDuckGo Privacy Essentials", id: 1_482_920_575
mas "Kindle", id: 405_399_194
mas "Magnet", id: 441_258_766
mas "Slack", id: 803_453_959
EOF

fancy_echo "Update heroku binary ..."
brew unlink heroku
brew link --force heroku

case "$SHELL" in
  */fish)
    if [ "$(command -v fish)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# fancy_echo "Configuring asdf version manager ..."
# if [ ! -d "$HOME/.asdf" ]; then
#   git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
#   append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
# fi
#
# alias install_asdf_plugin=add_or_update_asdf_plugin
# add_or_update_asdf_plugin() {
#   local name="$1"
#   local url="$2"
#
#   if ! asdf plugin-list | grep -Fq "$name"; then
#     asdf plugin-add "$name" "$url"
#   else
#     asdf plugin-update "$name"
#   fi
# }
#
# # shellcheck disable=SC1090
# source "$HOME/.asdf/asdf.sh"
# add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
# add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
#
# install_asdf_language() {
#   local language="$1"
#   local version
#   version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"
#
#   if ! asdf list "$language" | grep -Fq "$version"; then
#     asdf install "$language" "$version"
#     asdf global "$language" "$version"
#   fi
# }
#
# fancy_echo "Installing latest Ruby ..."
# install_asdf_language "ruby"
# gem update --system
# number_of_cores=$(sysctl -n hw.ncpu)
# bundle config --global jobs $((number_of_cores - 1))
#
# fancy_echo "Installing latest Node ..."
# bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
# install_asdf_language "nodejs"
#
# if [ -f "$HOME/.laptop.local" ]; then
#   fancy_echo "Running your customizations from ~/.laptop.local ..."
#   # shellcheck disable=SC1090
#   . "$HOME/.laptop.local"
# fi
